(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("FourCorners", [], factory);
	else if(typeof exports === 'object')
		exports["FourCorners"] = factory();
	else
		root["FourCorners"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/index.js
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


var ns = 'fc';

var FourCorners = function FourCorners(userOptions) {
  _classCallCheck(this, FourCorners);

  var defaultOptions = {
    selector: '.fc_embed',
    cornerStroke: '6px',
    cornerSize: '25px',
    cornerColor: 'white',
    cornerActiveColor: 'blue',
    cornerHoverColor: 'red',
    posDur: 0.2,
    transDur: 0.1
  };
  this.elems = {};
  this.opts = Object.assign(defaultOptions, userOptions);
  this.opts.cornerMargin = parseInt(this.opts.cornerSize) / 2 + 'px';
  this.corners = ['backstory', 'copyright', 'media', 'links'];
  this.elems.embed = initEmbed(this);
  this.data = parseData(this);
  this.elems.photo = addPhoto(this);
  this.elems.panels = addPanels(this);
  this.elems.corners = addCorners(this);
};

var initEmbed = function initEmbed(inst) {
  var embed = document.querySelector(inst.opts.selector);

  if (!embed) {
    return;
  } // embed = addStyles(embed, {
  // 	position: 'relative',
  // 	overflow: 'hidden'
  // });


  return embed;
};

var addPhoto = function addPhoto(inst) {
  var imgSrc = inst.data.image.src;
  var img = document.createElement('img');
  img.classList.add(className('photo'));
  img.src = imgSrc; // img = addStyles(img, {
  // 	width: '100%',
  // 	height: 'auto',
  // 	display: 'table'
  // });

  inst.elems.embed.appendChild(img);
  return img;
};

var addPanels = function addPanels(inst) {
  var panels = {};
  var embed = inst.elems.embed;
  inst.corners.forEach(function (id, i) {
    var _panel$classList;

    var panel = document.createElement('div');

    (_panel$classList = panel.classList).add.apply(_panel$classList, _toConsumableArray(className('panel')));

    panel.dataset.id = id; // const margin = parseInt(inst.opts.cornerSize)*2
    // const len = 'calc(100% - '+margin+'px)';
    // let panelStyles = {
    // 	width: len,
    // 	height: len,
    // 	position: 'absolute',
    // 	top: inst.opts.cornerSize,
    // 	left: inst.opts.cornerSize,
    // 	zIndex: '2',
    // 	backgroundColor: 'white',
    // 	display: 'none',
    // 	opacity: 0,
    // };
    // panel = addStyles(panel, panelStyles);

    var data = inst.data[id];
    var panelInner = '';
    Object.entries(data).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          prop = _ref2[0],
          val = _ref2[1];

      panelInner += "<div><strong>".concat(prop, "</strong>&nbsp;<span>").concat(val, "</span></div>");
    });
    panel.innerHTML = panelInner;
    embed.appendChild(panel);
    panels[id] = panel;
  });
  return panels;
};

var addCorners = function addCorners(inst) {
  var corners = {};
  var embed = inst.elems.embed;
  var cornerStroke = inst.opts.cornerStroke;
  var cornerSize = inst.opts.cornerSize;
  var cornerMargin = inst.opts.cornerMargin;
  inst.css = {
    'backstory': {
      // edges: ['top','left'],
      borderWidth: [cornerStroke, 0, 0, cornerStroke],
      origin: {
        top: '-' + cornerSize,
        left: '-' + cornerSize
      },
      hover: {
        top: cornerMargin,
        left: cornerMargin
      }
    },
    'copyright': {
      // edges: ['top','right'],
      borderWidth: [cornerStroke, cornerStroke, 0, 0],
      origin: {
        top: '-' + cornerSize,
        right: '-' + cornerSize
      },
      hover: {
        top: cornerMargin,
        right: cornerMargin
      }
    },
    'media': {
      // edges: ['bottom','right'],
      borderWidth: [0, cornerStroke, cornerStroke, 0],
      origin: {
        bottom: '-' + cornerSize,
        right: '-' + cornerSize
      },
      hover: {
        bottom: cornerMargin,
        right: cornerMargin
      }
    },
    'links': {
      // edges: ['bottom','left'],
      borderWidth: [0, 0, cornerStroke, cornerStroke],
      origin: {
        bottom: '-' + cornerSize,
        left: '-' + cornerSize
      },
      hover: {
        bottom: cornerMargin,
        left: cornerMargin
      }
    }
  };
  inst.corners.forEach(function (id, i) {
    var _corner$classList;

    var cssClone = Object.assign({}, inst.css[id]);
    var corner = document.createElement('div');

    (_corner$classList = corner.classList).add.apply(_corner$classList, _toConsumableArray(className('corner')));

    corner.dataset.id = id; // let cornerStyles = {
    // 	width: cornerSize,
    // 	height: cornerSize,
    // 	position: 'absolute',
    // 	zIndex: '3',
    // 	borderStyle: 'solid',
    // 	borderColor: inst.opts.cornerColor
    // };
    // const originClone = Object.assign({}, cssClone.origin);
    // Object.assign(cornerStyles, originClone);
    // cornerStyles['borderWidth'] = cssClone.borderWidth.join(' ');
    // corner = addStyles(corner, cornerStyles);

    embed.addEventListener('mouseenter', function (e) {
      hoverEmbed(e, inst);
    });
    embed.addEventListener('mouseleave', function (e) {
      unhoverEmbed(e, inst);
    });
    corner.addEventListener('mouseenter', function (e) {
      hoverCorner(e, inst);
    });
    corner.addEventListener('mouseleave', function (e) {
      unhoverCorner(e, inst);
    });
    corner.addEventListener('click', function (e) {
      clickCorner(e, inst);
    });
    corners[id] = corner;
    embed.appendChild(corner);
  });
  return corners;
};

var parseData = function parseData(inst) {
  var stringData = inst.elems.embed.dataset.json.replace(/(\')/g, '"');
  delete inst.elems.embed.dataset.json;
  return JSON.parse(stringData);
};

var hoverEmbed = function hoverEmbed(e, inst) {
  var embed = inst.elems.embed;
  var corners = inst.elems.corners;
  var css = inst.css;
  var posDur = inst.opts.posDur; // Object.entries(corners).forEach(([id, corner]) => {
  // 	TweenMax.to(corner, posDur, css[id].hover);
  // });
};

var unhoverEmbed = function unhoverEmbed(e, inst) {
  var embed = inst.elems.embed;
  var corners = inst.elems.corners;
  var css = inst.css;
  var posDur = inst.opts.posDur; // Object.entries(corners).forEach(([id, corner]) => {
  // 	TweenMax.to(corner, inst.opts.posDur, css[id].origin);
  // });
};

var hoverCorner = function hoverCorner(e, inst) {
  var corner = e.target;
  corner.classList.add(className('hover')); // corner = addStyles(corner, {cursor: 'pointer'});
  // const transDur = inst.opts.transDur;
  // let cornerColor = '';
  // if(corner.classList.contains(className('active'))) {
  // 	cornerColor = inst.opts.cornerColor;
  // } else {
  // 	cornerColor = inst.opts.cornerHoverColor;
  // }
  // cornerColor = inst.opts.cornerHoverColor;
  // TweenMax.to(corner, transDur, {
  // 	borderColor: cornerColor
  // });
};

var unhoverCorner = function unhoverCorner(e, inst) {
  var corner = e.target;
  corner.classList.remove(className('hover')); // corner = addStyles(corner, {cursor: ''});
  // let transDur = inst.opts.transDur;;
  // let cornerColor = '';
  // cornerColor = '';
  // if(corner.classList.contains(className('active'))) {
  // 	cornerColor = inst.opts.cornerActiveColor;
  // } else {
  // 	cornerColor = inst.opts.cornerColor;
  // }
  // TweenMax.to(corner, transDur, {
  // 	borderColor: cornerColor
  // });
};

var clickCorner = function clickCorner(e, inst) {
  var corner = e.target;
  var id = corner.dataset.id; // const transDur = inst.opts.transDur;
  // let cornerColor = '';

  var activePanelSelector = '.' + className('panel') + '.' + className('active');
  var activePanel = document.querySelector(activePanelSelector);

  if (activePanel) {
    activePanel.classList.remove(className('active')); // TweenMax.to(activePanel, transDur, {
    // 	opacity: 0,
    // 	onComplete: () => {
    // 		activePanel = addStyles(activePanel, {display:'none'});
    // 	}
    // });
  }

  var activeCornerSelector = '.' + className('corner') + '.' + className('active');
  var activeCorner = document.querySelector(activeCornerSelector);

  if (activeCorner) {
    activeCorner.classList.remove(className('active')); // TweenMax.to(activeCorner, transDur, {
    // 	borderColor: inst.opts.cornerColor,
    // });
  }

  corner.classList.toggle(className('active')); // if(corner.classList.contains(className('active'))) {
  // 	cornerColor = inst.opts.cornerActiveColor;
  // } else {
  // 	cornerColor = inst.opts.cornerColor;
  // }
  // TweenMax.to(corner, transDur, {
  // 	borderColor: cornerColor
  // });

  var panel = inst.elems.panels[id];
  panel.classList.toggle(className('active')); // if(corner.classList.contains(className('active'))) {
  // 	panel = addStyles(panel, {display:'block'});
  // 	TweenMax.to(panel, transDur, {
  // 		opacity: 1
  // 	});
  // } else {
  // 	TweenMax.to(panel, transDur, {
  // 		opacity: 0,
  // 		onComplete: () => {
  // 			panel = addStyles(panel, {display:'none'});
  // 		}
  // 	});
  // }
};

var addStyles = function addStyles(elem, styles) {
  Object.entries(styles).forEach(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        prop = _ref4[0],
        val = _ref4[1];

    elem.style[prop] = val;
  });
  return elem;
};

var className = function className(input) {
  var output = [];

  if (!Array.isArray(input)) {
    input = [input];
  }

  input.forEach(function (str, i) {
    output[i] = ns + '_' + str;
  });
  return output;
};

/* harmony default export */ var src = (FourCorners);
// CONCATENATED MODULE: ./index.js

/* harmony default export */ var index = __webpack_exports__["default"] = (src);

/***/ })
/******/ ]);
});
//# sourceMappingURL=four-corners.min.js.map